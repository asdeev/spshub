# Build file for SPSHub
#
# No real need for layer caching, this will be really quick to build

docker-sign-in: &docker-sign-in
  name: Sign into Docker registry
  command: |
    docker login \
        -u ${PROJECT_DOCKER_REGISTRY_USER} \
        -p ${GITLAB_CDDEMO_REGISTRY_TOKEN} \
        ${PROJECT_DOCKER_REGISTRY}

only-deploy-tags: &only-deploy-tags
  filters:
    tags:
      only: /^deploy-.*/
    branches:
      ignore: /.*/

common-env-vars: &common-env-vars
  PROJECT_DOCKER_REGISTRY: registry.gitlab.com
  PROJECT_DOCKER_REGISTRY_USER: halfercode
  PROJECT_DOCKER_IMAGE_URL: registry.gitlab.com/halfercode
  PROJECT_DOCKER_SERVICE_NAME: cd-demo
  PROJECT_DEPLOY_HOST: agnes.jondh.me.uk
  PROJECT_DEPLOY_USER: root

# Here are the jobs

version: 2
jobs:
  build:
    working_directory: /app
    environment: *common-env-vars
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      # This gets the local Docker service started
      - setup_remote_docker
      - run: *docker-sign-in
      - run:
          name: Build application Docker image
          command: |
            docker build \
                --tag ${CIRCLE_PROJECT_REPONAME} \
                .
      - run:
          name: Install test software
          command: |
            apk update
            apk --update add php7 openssl
            # Composer requirements
            apk --update add php7-openssl php7-json php7-mbstring php7-zlib php7-phar
            # PHPUnit requirements
            apk --update add php7-dom php7-mbstring
            # Give the PHP binary a nice name
            ln -s /usr/bin/php7 /usr/bin/php
            cd /app && sh /app/install/composer.sh
            php /app/composer.phar install
      - run:
          name: Start Docker container
          command: |
            docker run \
                --detach \
                --name ${CIRCLE_PROJECT_REPONAME} \
                ${CIRCLE_PROJECT_REPONAME}
            docker ps
      - run:
          # Thanks to https://unix.stackexchange.com/a/5279. CircleCI's Docker
          # system does not allow external connections in a DinD set-up, so I am
          # reaching into the container to do that.
          name: Wait for container to be ready
          command: |
            docker exec -it ${CIRCLE_PROJECT_REPONAME} /app/bin/wait.sh
      - run:
          name: Run tests
          command: |
            /app/vendor/bin/phpunit
      - run:
          name: Stop Docker container
          command: |
            docker stop ${CIRCLE_PROJECT_REPONAME}
      - run:
          name: Push Docker image if a deploy tag is detected
          command: |
            case $CIRCLE_TAG in
                deploy*)
                    docker tag ${CIRCLE_PROJECT_REPONAME} ${PROJECT_DOCKER_IMAGE_URL}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}
                    docker push ${PROJECT_DOCKER_IMAGE_URL}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}
                    ;;
                *)
                    echo "No deploy tag, so no need to push"
                    ;;
            esac

  deploy:
    working_directory: /app
    environment: *common-env-vars
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      # Adds the keys from the UI so we can access a remote service
      - add_ssh_keys
      # This gets the local Docker service started
      - setup_remote_docker
      - run:
          name: Add the keys to the known hosts
          command: |
            ssh-keyscan -H ${PROJECT_DEPLOY_HOST} >> /root/.ssh/known_hosts
      - run:
          name: Pull Docker image onto deploy box
          command: |
            ssh ${PROJECT_DEPLOY_USER}@${PROJECT_DEPLOY_HOST} "docker pull ${PROJECT_DOCKER_IMAGE_URL}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
      - run:
          name: Do a rolling service update
          command: |
            # This should already be scaled to two instances
            # The 'uniq' suppresses a long stream of ncurses updates
            # (which the CI console doesn't cope with very well)
            ssh ${PROJECT_DEPLOY_USER}@${PROJECT_DEPLOY_HOST} \
                "docker service update \
                    --env-add CD_DEMO_VERSION=${CIRCLE_TAG} \
                    --image=${PROJECT_DOCKER_IMAGE_URL}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG} \
                    --with-registry-auth \
                    ${PROJECT_DOCKER_SERVICE_NAME} \
                | uniq \
                "
workflows:
  version: 2
  # This runs on non-tag pushes
  untagged-build:
    jobs:
      - build
  # This only runs on deploy tags and not branches
  tagged-build:
    jobs:
      - build: *only-deploy-tags
      - deploy:
          <<: *only-deploy-tags
          requires:
            - build
